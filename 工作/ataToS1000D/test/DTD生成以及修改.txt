
The ElementTree class

An ElementTree is mainly a document wrapper around a tree with a root node. 
It provides a couple of methods for serialisation and general document handling.

>>> root = etree.XML('''\
... <?xml version="1.0"?>
... <!DOCTYPE root SYSTEM "test" [ <!ENTITY tasty "parsnips"> ]>
... <root>
...   <a>&tasty;</a>
... </root>
... ''')

>>> tree = etree.ElementTree(root)
>>> print(tree.docinfo.xml_version)
1.0
>>> print(tree.docinfo.doctype)
<!DOCTYPE root SYSTEM "test">

>>> tree.docinfo.public_id = '-//W3C//DTD XHTML 1.0 Transitional//EN'
>>> tree.docinfo.system_url = 'file://local.dtd'
>>> print(tree.docinfo.doctype)
<!DOCTYPE root PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "file://local.dtd">

An ElementTree is also what you get back when you call the parse() function to parse files 
or file-like objects (see the parsing section below).

One of the important differences is that the ElementTree class serialises as a complete 
document, as opposed to a single Element. This includes top-level processing instructions
 and comments, as well as a DOCTYPE and other DTD content in the document:

>>> print(etree.tostring(tree))  # lxml 1.3.4 and later
<!DOCTYPE root PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "file://local.dtd" [
<!ENTITY tasty "parsnips">
]>
<root>
  <a>parsnips</a>
</root>

In the original xml.etree.ElementTree implementation and in lxml up to 1.3.3, the output
 looks the same as when serialising only the root Element:

>>> print(etree.tostring(tree.getroot()))
<root>
  <a>parsnips</a>
</root>

This serialisation behaviour has changed in lxml 1.3.4. Before, the tree was serialised 
without DTD content, which made lxml lose DTD information in an input-output cycle.
